#include "pak.h"

void printHelp () {
	printf ("Call: pak [COMMAND] [FILE] [FILE] [FILE]\n");
	printf ("\n\nCOMMANDs are:\n");
	printf ("c\tcreate a new (empty) pakfile\n");
	printf ("p\tprint out the directory of a pakfile\n");
	printf ("i\tinsert a file into a pakfile\n");
	printf ("v\tverify the integrity of a pakfile\n");
	printf ("e\textract a file from a pakfile\n\n");
	printf ("Hints for insertion and extraction:\n");
	printf ("If you want to insert a file into a PAK you need to specify three filenames:\n");
	printf ("1. The pakfile we are working with\n");
	printf ("2. The file in the real filesystem (something like ~/myfile.txt)\n");
	printf ("3. The file in the virtual filesystem of the PAK\n\n");
	printf ("Examples:\n pak i ~/myPAK.pak ~/picture.xpm bitmaps/firstpic.xpm\n");
	printf (" pak e ~/myPAK.pak bitmaps/firstpic.xpm ~/picture.xpm\n");
}

void printDirTree (pakfile *fp) {
	int x;

	if (fp == NULL) {
		printf("pak: File not found.\n");
		return;
	}

	dirsection *myfiles = loadDirSection (fp, &x);

	char *name;

	x--;
	while ( x >= 0) {
		name = myfiles[x].filename;

		printf("%25s", name);
		printf("\t\t");
		printf("%8i", myfiles[x].file_length);
		printf("  Bytes\n");

		x--;
	}
}

int checkCmd (char* arr[]) {
	char a[] = {'c', 'p', 'i', 'v', 'e'};

	int b;
	int c = 0;

	for (b = 0; b < 5; b++) {
		int f =	strncmp (arr[1], &a[b], 1);
		if(f == 0)
			c = 1;
	}

	return c;
}

int main (int argc, char* argv[]) {

	if (argc == 1) {
		printHelp();
		return 0;
	}

	if(argc == 2) {
		printf ("pak: missing argument\n");
		return 1;
	}

	if (checkCmd (argv) == 0) {
		printf("pak: invalid command\n");
		return 1;
	}

	if (strncmp (argv[1], "c", 1) == 0 && argc == 3) {
		createPak (argv[2]);
		return 0;
	}

	if (strncmp (argv[1], "p", 1) == 0 && argc == 3) {
		printDirTree (openPak (argv[2]));
		return 0;
	}

	if (strncmp (argv[1], "i", 1) == 0 && argc == 5) {
		if (insertPak(argv[3], argv[4], openPak(argv[2])) != 0) {
			printf("pak: Couldn't insert given file.\n");
			return -1;
		} 
	} else if (strncmp (argv[1], "i", 1) == 0 && argc < 5) {
		printf ("pak: missing argument\n");
		return 1;
	}

	if (strncmp (argv[1], "v", 1) == 0 && argc == 3) {
		switch (checkPak (openPak (argv[2]))) {
			case -1:
				printf ("pak: ");
				printf (argv[2]);
				printf (" --> Magic corrupt / Not a PAK file\n");
				return -1;

			case -2:
				printf ("pak: ");
				printf (argv[2]);
				printf (" --> Header corrupt / PAK file broken\n");
				return -1;

			case 0:
				printf ("pak: ");
				printf (argv[2]);
				printf (" --> OK\n");
		}

		return 0;
	}

	if (strncmp (argv[1], "e", 1) == 0 && argc == 5) {
		if (extractPak (argv[3], argv[4], openPak (argv[2])) != 0) {
			printf ("pak: Couldn't extract given file.\n");
			return -1;
		}
	} else if (strncmp (argv[1], "e", 1) == 0 && argc < 5) {
		printf ("pak: missing argument\n");
		return 1;
	}

	return 0;
}
